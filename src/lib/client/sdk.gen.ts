/*
 * Copyright 2025 Nimtable
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch"
import type {
  LoginData,
  LoginResponse2,
  LoginError,
  GetUsersData,
  GetUsersResponse,
  GetUsersError,
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  DeleteUserData,
  DeleteUserResponse,
  DeleteUserError,
  GetUserByIdData,
  GetUserByIdResponse,
  GetUserByIdError,
  UpdateUserData,
  UpdateUserResponse,
  UpdateUserError,
  GetCatalogsData,
  GetCatalogsResponse,
  GetCatalogsError,
  CreateCatalogData,
  CreateCatalogResponse,
  CreateCatalogError,
  DeleteCatalogData,
  DeleteCatalogResponse,
  DeleteCatalogError,
} from "./types.gen"
import { client as _heyApiClient } from "./client.gen"

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * User login
 * Authenticate user with username and password
 */
export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginResponse2,
    LoginError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Get all users
 * Returns a list of all users
 */
export const getUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUsersResponse,
    GetUsersError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users",
    ...options,
  })
}

/**
 * Create new user
 * Creates a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete user
 * Deletes a specific user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponse,
    DeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/{userId}",
    ...options,
  })
}

/**
 * Get user by ID
 * Returns a specific user by their ID
 */
export const getUserById = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByIdResponse,
    GetUserByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/{userId}",
    ...options,
  })
}

/**
 * Update user
 * Updates a specific user
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/{userId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Get all catalogs
 * Returns a list of all catalogs
 */
export const getCatalogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetCatalogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCatalogsResponse,
    GetCatalogsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/catalogs",
    ...options,
  })
}

/**
 * Create new catalog
 * Creates a new catalog
 */
export const createCatalog = <ThrowOnError extends boolean = false>(
  options: Options<CreateCatalogData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCatalogResponse,
    CreateCatalogError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/catalogs",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete catalog
 * Deletes a specific catalog
 */
export const deleteCatalog = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCatalogData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCatalogResponse,
    DeleteCatalogError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/catalogs/{catalogName}",
    ...options,
  })
}
