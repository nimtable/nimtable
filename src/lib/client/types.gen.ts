/*
 * Copyright 2025 Nimtable
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// This file is auto-generated by @hey-api/openapi-ts

export type CatalogCreate = {
    name: string;
    type: string;
    uri?: string;
    warehouse?: string;
    properties?: {
        [key: string]: string;
    };
};

export type Catalog = {
    name: string;
    type: string;
    uri?: string;
    warehouse?: string;
    properties?: {
        [key: string]: string;
    };
};

export type _Error = {
    code: string;
    message: string;
    details?: string;
};

export type TableInfo = {
    /**
     * The location of the metadata file
     */
    'metadata-location'?: string;
    metadata: {
        'format-version'?: number;
        'table-uuid'?: string;
        location?: string;
        'last-sequence-number'?: number;
        'last-updated-ms'?: number;
        'last-column-id'?: number;
        'current-schema-id'?: number;
        schemas?: Array<{
            type?: string;
            'schema-id'?: number;
            fields?: Array<{
                id?: number;
                name?: string;
                required?: boolean;
                type?: string;
            }>;
        }>;
        'default-spec-id'?: number;
        'partition-specs'?: Array<{
            'spec-id'?: number;
            fields?: Array<{
                [key: string]: unknown;
            }>;
        }>;
        'last-partition-id'?: number;
        'default-sort-order-id'?: number;
        'sort-orders'?: Array<{
            'order-id'?: number;
            fields?: Array<{
                [key: string]: unknown;
            }>;
        }>;
        properties?: {
            [key: string]: string;
        };
        'current-snapshot-id'?: number;
        refs?: {
            main?: {
                'snapshot-id'?: number;
                type?: string;
            };
        };
        snapshots?: Array<{
            'sequence-number'?: number;
            'snapshot-id'?: number;
            'parent-snapshot-id'?: number;
            'timestamp-ms'?: number;
            summary?: {
                operation?: string;
                'added-data-files'?: string;
                'deleted-data-files'?: string;
                'added-records'?: string;
                'deleted-records'?: string;
                'added-files-size'?: string;
                'removed-files-size'?: string;
                'changed-partition-count'?: string;
                'iceberg-version'?: string;
            };
            'manifest-list'?: string;
            'schema-id'?: number;
        }>;
        statistics?: Array<unknown>;
        'partition-statistics'?: Array<unknown>;
        'snapshot-log'?: Array<{
            'timestamp-ms'?: number;
            'snapshot-id'?: number;
        }>;
        'metadata-log'?: Array<{
            'timestamp-ms'?: number;
            'metadata-file'?: string;
        }>;
    };
};

export type GetCatalogsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/catalogs';
};

export type GetCatalogsErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
};

export type GetCatalogsError = GetCatalogsErrors[keyof GetCatalogsErrors];

export type GetCatalogsResponses = {
    /**
     * Successfully retrieved catalog list
     */
    200: Array<string>;
};

export type GetCatalogsResponse = GetCatalogsResponses[keyof GetCatalogsResponses];

export type CreateCatalogData = {
    body: CatalogCreate;
    path?: never;
    query?: never;
    url: '/api/catalogs';
};

export type CreateCatalogErrors = {
    /**
     * Invalid request parameters
     */
    400: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateCatalogError = CreateCatalogErrors[keyof CreateCatalogErrors];

export type CreateCatalogResponses = {
    /**
     * Catalog created successfully
     */
    201: Catalog;
};

export type CreateCatalogResponse = CreateCatalogResponses[keyof CreateCatalogResponses];

export type DeleteCatalogData = {
    body?: never;
    path: {
        catalogName: string;
    };
    query?: never;
    url: '/api/catalogs/{catalogName}';
};

export type DeleteCatalogErrors = {
    /**
     * Invalid request parameters
     */
    400: _Error;
    /**
     * Catalog not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteCatalogError = DeleteCatalogErrors[keyof DeleteCatalogErrors];

export type DeleteCatalogResponses = {
    /**
     * Catalog deleted successfully
     */
    204: void;
};

export type DeleteCatalogResponse = DeleteCatalogResponses[keyof DeleteCatalogResponses];

export type GetTableInfoData = {
    body?: never;
    path: {
        catalog: string;
        namespace: string;
        table: string;
    };
    query?: never;
    url: '/api/catalog/{catalog}/v1/namespaces/{namespace}/tables/{table}';
};

export type GetTableInfoErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Table not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetTableInfoError = GetTableInfoErrors[keyof GetTableInfoErrors];

export type GetTableInfoResponses = {
    /**
     * Successfully retrieved table information
     */
    200: TableInfo;
};

export type GetTableInfoResponse = GetTableInfoResponses[keyof GetTableInfoResponses];

export type ClientOptions = {
    baseUrl: `${string}://src` | (string & {});
};