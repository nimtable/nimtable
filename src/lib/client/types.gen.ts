/*
 * Copyright 2025 Nimtable
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is auto-generated by @hey-api/openapi-ts

export type LoginRequest = {
  username: string
  password: string
}

export type LoginResponse = {
  success: boolean
}

export type CatalogCreate = {
  name: string
  type: string
  uri?: string
  warehouse?: string
  properties?: {
    [key: string]: string
  }
}

export type Catalog = {
  name: string
  type: string
  uri?: string
  warehouse?: string
  properties?: {
    [key: string]: string
  }
}

export type _Error = {
  code: string
  message: string
  details?: string
}

export type User = {
  id?: number
  username: string
  /**
   * Password hash (never sent in responses)
   */
  passwordHash?: string
  createdAt?: string
  updatedAt?: string
}

export type UserCreate = {
  username: string
  password: string
}

export type UserUpdate = {
  username: string
  password?: string
}

export type LoginData = {
  body: LoginRequest
  path?: never
  query?: never
  url: "/api/login"
}

export type LoginErrors = {
  /**
   * Invalid request parameters
   */
  400: _Error
  /**
   * Invalid credentials
   */
  401: _Error
}

export type LoginError = LoginErrors[keyof LoginErrors]

export type LoginResponses = {
  /**
   * Login successful
   */
  200: LoginResponse
}

export type LoginResponse2 = LoginResponses[keyof LoginResponses]

export type GetUsersData = {
  body?: never
  path?: never
  query?: never
  url: "/api/users"
}

export type GetUsersErrors = {
  /**
   * Unauthorized
   */
  401: _Error
}

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors]

export type GetUsersResponses = {
  /**
   * Successfully retrieved user list
   */
  200: Array<User>
}

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses]

export type CreateUserData = {
  body: UserCreate
  path?: never
  query?: never
  url: "/api/users"
}

export type CreateUserErrors = {
  /**
   * Invalid request parameters
   */
  400: _Error
  /**
   * Username already exists
   */
  409: _Error
  /**
   * Internal server error
   */
  500: _Error
}

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors]

export type CreateUserResponses = {
  /**
   * User created successfully
   */
  201: User
}

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses]

export type DeleteUserData = {
  body?: never
  path: {
    userId: number
  }
  query?: never
  url: "/api/users/{userId}"
}

export type DeleteUserErrors = {
  /**
   * Unauthorized
   */
  401: _Error
  /**
   * User not found
   */
  404: _Error
  /**
   * Internal server error
   */
  500: _Error
}

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors]

export type DeleteUserResponses = {
  /**
   * User deleted successfully
   */
  204: void
}

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses]

export type GetUserByIdData = {
  body?: never
  path: {
    userId: number
  }
  query?: never
  url: "/api/users/{userId}"
}

export type GetUserByIdErrors = {
  /**
   * Unauthorized
   */
  401: _Error
  /**
   * User not found
   */
  404: _Error
}

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors]

export type GetUserByIdResponses = {
  /**
   * Successfully retrieved user
   */
  200: User
}

export type GetUserByIdResponse =
  GetUserByIdResponses[keyof GetUserByIdResponses]

export type UpdateUserData = {
  body: UserUpdate
  path: {
    userId: number
  }
  query?: never
  url: "/api/users/{userId}"
}

export type UpdateUserErrors = {
  /**
   * Invalid request parameters
   */
  400: _Error
  /**
   * User not found
   */
  404: _Error
  /**
   * Username already exists
   */
  409: _Error
  /**
   * Internal server error
   */
  500: _Error
}

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors]

export type UpdateUserResponses = {
  /**
   * User updated successfully
   */
  200: User
}

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses]

export type GetCatalogsData = {
  body?: never
  path?: never
  query?: never
  url: "/api/catalogs"
}

export type GetCatalogsErrors = {
  /**
   * Unauthorized
   */
  401: _Error
}

export type GetCatalogsError = GetCatalogsErrors[keyof GetCatalogsErrors]

export type GetCatalogsResponses = {
  /**
   * Successfully retrieved catalog list
   */
  200: Array<string>
}

export type GetCatalogsResponse =
  GetCatalogsResponses[keyof GetCatalogsResponses]

export type CreateCatalogData = {
  body: CatalogCreate
  path?: never
  query?: never
  url: "/api/catalogs"
}

export type CreateCatalogErrors = {
  /**
   * Invalid request parameters
   */
  400: _Error
  /**
   * Internal server error
   */
  500: _Error
}

export type CreateCatalogError = CreateCatalogErrors[keyof CreateCatalogErrors]

export type CreateCatalogResponses = {
  /**
   * Catalog created successfully
   */
  201: Catalog
}

export type CreateCatalogResponse =
  CreateCatalogResponses[keyof CreateCatalogResponses]

export type DeleteCatalogData = {
  body?: never
  path: {
    catalogName: string
  }
  query?: never
  url: "/api/catalogs/{catalogName}"
}

export type DeleteCatalogErrors = {
  /**
   * Invalid request parameters
   */
  400: _Error
  /**
   * Catalog not found
   */
  404: _Error
  /**
   * Internal server error
   */
  500: _Error
}

export type DeleteCatalogError = DeleteCatalogErrors[keyof DeleteCatalogErrors]

export type DeleteCatalogResponses = {
  /**
   * Catalog deleted successfully
   */
  204: void
}

export type DeleteCatalogResponse =
  DeleteCatalogResponses[keyof DeleteCatalogResponses]

export type ClientOptions = {
  baseUrl: `${string}://src` | (string & {})
}
