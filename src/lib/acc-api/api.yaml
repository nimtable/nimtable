openapi: 3.0.0
info:
  title: NimTable Account API
  description: API documentation for NimTable application
  version: 1.0.0
  contact:
    name: API Support
    email: support@nimtable.com

paths:
  /acc-api/auth/login:
    post:
      summary: User login
      description: Authenticate user with username and password
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "403":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /acc-api/auth/logout:
    post:
      summary: User logout
      description: Logout the current user and clear authentication token
      operationId: logout
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /acc-api/auth/reset-password:
    patch:
      summary: Reset user password
      description: Update the current user's password
      operationId: resetPassword
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetResponse"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized or invalid current password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /acc-api/user-info:
    get:
      summary: Get current user profile
      description: Returns the current authenticated user's profile information
      operationId: getCurrentUserProfile
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update current user profile
      description: Updates the current authenticated user's profile information
      operationId: updateCurrentUserProfile
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileUpdate"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /acc-api/users:
    get:
      summary: Get all users
      description: Returns a list of all users
      operationId: getUsers
      tags:
        - User
      responses:
        "200":
          description: Successfully retrieved user list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create new user
      description: Creates a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /acc-api/users/{userId}:
    get:
      summary: Get user by ID
      description: Returns a specific user by their ID
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update user
      description: Updates a specific user
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete user
      description: Deletes a specific user
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        token:
          type: string
          description: JWT token for authentication
      required:
        - success
        - token

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
      required:
        - success

    PasswordResetRequest:
      type: object
      properties:
        currentPassword:
          type: string
          format: password
          description: Current password for verification
        newPassword:
          type: string
          format: password
          description: New password to set
      required:
        - currentPassword
        - newPassword

    PasswordResetResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
      required:
        - message

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
      required:
        - code
        - message

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        role:
          type: string
          enum: [admin, editor, viewer]
          description: "User's role name"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: ["id", "username", "role", "createdAt", "updatedAt"]

    UserCreate:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        roleId:
          type: integer
          description: "Role ID (1: admin, 2: editor, 3: viewer)"
      required: ["username", "password", "roleId"]

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        roleId:
          type: integer
          description: "Role ID (1: admin, 2: editor, 3: viewer)"

    UserProfileUpdate:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      description: "Update current user's profile information"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
