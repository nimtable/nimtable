openapi: 3.0.0
info:
  title: NimTable API
  description: API documentation for NimTable application
  version: 1.0.0
  contact:
    name: API Support
    email: support@nimtable.com

paths:
  /api/login:
    post:
      summary: User login
      description: Authenticate user with username and password
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "403":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/user:
    get:
      summary: Get current user
      description: Returns the current authenticated user's information
      operationId: getCurrentUser
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users:
    get:
      summary: Get all users
      description: Returns a list of all users
      operationId: getUsers
      tags:
        - User
      responses:
        "200":
          description: Successfully retrieved user list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create new user
      description: Creates a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users/{userId}:
    get:
      summary: Get user by ID
      description: Returns a specific user by their ID
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update user
      description: Updates a specific user
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete user
      description: Deletes a specific user
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/catalogs:
    get:
      summary: Get all catalogs
      description: Returns a list of all catalogs
      operationId: getCatalogs
      tags:
        - Catalog
      responses:
        "200":
          description: Successfully retrieved catalog list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create new catalog
      description: Creates a new catalog
      operationId: createCatalog
      tags:
        - Catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CatalogCreate"
      responses:
        "201":
          description: Catalog created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/catalogs/{catalogName}:
    delete:
      summary: Delete catalog
      description: Deletes a specific catalog
      operationId: deleteCatalog
      tags:
        - Catalog
      parameters:
        - name: catalogName
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Catalog deleted successfully
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Catalog not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/catalog/{catalog}/v1/namespaces/{namespace}/tables/{table}:
    get:
      summary: Get table information
      description: Returns detailed information about a specific table including metadata and snapshots
      operationId: getTableInfo
      tags:
        - Table
      parameters:
        - name: catalog
          in: path
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: table
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved table information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInfo"
        "404":
          description: Table not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        token:
          type: string
          description: JWT token for authentication
      required:
        - success
        - token

    CatalogCreate:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        uri:
          type: string
        warehouse:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
      required:
        - name
        - type

    Catalog:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        uri:
          type: string
        warehouse:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
      required:
        - name
        - type

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
      required:
        - code
        - message

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        role:
          type: string
          enum: [admin, editor, viewer]
          description: "User's role name"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: ["id", "username", "role", "createdAt", "updatedAt"]

    UserCreate:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        roleId:
          type: integer
          description: "Role ID (1: admin, 2: editor, 3: viewer)"
      required: ["username", "password", "roleId"]

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        roleId:
          type: integer
          description: "Role ID (1: admin, 2: editor, 3: viewer)"

    TableInfo:
      type: object
      properties:
        "metadata-location":
          type: string
          description: The location of the metadata file
        metadata:
          type: object
          properties:
            "format-version":
              type: integer
            "table-uuid":
              type: string
            location:
              type: string
            "last-sequence-number":
              type: integer
            "last-updated-ms":
              type: integer
              format: int64
            "last-column-id":
              type: integer
            "current-schema-id":
              type: integer
            schemas:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  "schema-id":
                    type: integer
                  fields:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        required:
                          type: boolean
                        type:
                          type: string
            "default-spec-id":
              type: integer
            "partition-specs":
              type: array
              items:
                type: object
                properties:
                  "spec-id":
                    type: integer
                  fields:
                    type: array
                    items:
                      type: object
            "last-partition-id":
              type: integer
            "default-sort-order-id":
              type: integer
            "sort-orders":
              type: array
              items:
                type: object
                properties:
                  "order-id":
                    type: integer
                  fields:
                    type: array
                    items:
                      type: object
            properties:
              type: object
              additionalProperties:
                type: string
            "current-snapshot-id":
              type: integer
              format: int64
            refs:
              type: object
              properties:
                main:
                  type: object
                  properties:
                    "snapshot-id":
                      type: integer
                      format: int64
                    type:
                      type: string
            snapshots:
              type: array
              items:
                type: object
                properties:
                  "sequence-number":
                    type: integer
                  "snapshot-id":
                    type: integer
                    format: int64
                  "parent-snapshot-id":
                    type: integer
                    format: int64
                  "timestamp-ms":
                    type: integer
                    format: int64
                  summary:
                    type: object
                    properties:
                      operation:
                        type: string
                      "added-data-files":
                        type: string
                      "deleted-data-files":
                        type: string
                      "added-records":
                        type: string
                      "deleted-records":
                        type: string
                      "added-files-size":
                        type: string
                      "removed-files-size":
                        type: string
                      "changed-partition-count":
                        type: string
                      "iceberg-version":
                        type: string
                  "manifest-list":
                    type: string
                  "schema-id":
                    type: integer
            statistics:
              type: array
            "partition-statistics":
              type: array
            "snapshot-log":
              type: array
              items:
                type: object
                properties:
                  "timestamp-ms":
                    type: integer
                    format: int64
                  "snapshot-id":
                    type: integer
                    format: int64
            "metadata-log":
              type: array
              items:
                type: object
                properties:
                  "timestamp-ms":
                    type: integer
                    format: int64
                  "metadata-file":
                    type: string
      required:
        - metadata

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
